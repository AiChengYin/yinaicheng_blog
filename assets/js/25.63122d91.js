(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{498:function(a,t,s){a.exports=s.p+"assets/img/class_file_content.9669cb93.jpg"},499:function(a,t,s){a.exports=s.p+"assets/img/jvm_runtime_data_area.7eab18b2.jpg"},500:function(a,t,s){a.exports=s.p+"assets/img/help_memory.f5f0654b.jpg"},501:function(a,t,s){a.exports=s.p+"assets/img/virtual_machine_stack.d81b9e3a.jpg"},502:function(a,t,s){a.exports=s.p+"assets/img/native_method_stack.a8a73038.jpg"},503:function(a,t,s){a.exports=s.p+"assets/img/program_counter.366402c7.jpg"},643:function(a,t,s){"use strict";s.r(t);var r=s(8),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java程序运行原理分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java程序运行原理分析"}},[a._v("#")]),a._v(" Java程序运行原理分析")]),a._v(" "),t("h2",{attrs:{id:"class文件内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class文件内容"}},[a._v("#")]),a._v(" class文件内容")]),a._v(" "),t("p",[a._v("开发人员编写java文件，经过javac.exe编译得到.class文件，然后经java.exe编译得到结果，class文件即字节码文件，它是可执行的java程序")]),a._v(" "),t("p",[a._v("展示为16进制的class文件内容如下图所示")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(498),loading:"lazy"}})]),a._v(" "),t("h3",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),t("ul",[t("li",[a._v("class文件包含JAVA程序执行的字节码")]),a._v(" "),t("li",[a._v("数据严格按照格式紧凑排列在class文件中，中间无任何分隔符")]),a._v(" "),t("li",[a._v("文件开头有一个0Xcafebabe（16进制），是特殊的标志")]),a._v(" "),t("li",[a._v("class文件含有复杂格式，专门给JVM读里面的内容，人工阅读可以借助工具查看，包含如下内容：\n"),t("ul",[t("li",[a._v("版本")]),a._v(" "),t("li",[a._v("访问标志")]),a._v(" "),t("li",[a._v("常量池")]),a._v(" "),t("li",[a._v("当前类")]),a._v(" "),t("li",[a._v("超级类")]),a._v(" "),t("li",[a._v("接口")]),a._v(" "),t("li",[a._v("字段")]),a._v(" "),t("li",[a._v("方法")]),a._v(" "),t("li",[a._v("属性")])])])]),a._v(" "),t("h2",{attrs:{id:"jvm运行时数据区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm运行时数据区"}},[a._v("#")]),a._v(" JVM运行时数据区")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(499),loading:"lazy"}})]),a._v(" "),t("ul",[t("li",[a._v("JVM运行时数据区主要包含两大部分：线程独占部分和线程共享部分。")]),a._v(" "),t("li",[a._v("线程共享部分包含：方法区、堆内存，每个线程都会有它独立的空间，随着线程生命周期创建和销毁。")]),a._v(" "),t("li",[a._v("线程独占部分包含：虚拟机栈、本地方法栈、程序计数器，所有线程都能访问到的内存数据区域，随着虚拟机或者GC创建和销毁。")])]),a._v(" "),t("h2",{attrs:{id:"方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),t("p",[a._v("JVM用来存储加载的类信息、常量、静态变量、编译后的代码等数据，在虚拟机规范中，这是一个逻辑区划，具体实现根据不同的虚拟机来实现。"),t("br"),a._v("\n如：oracle的HotSpot在java7中方法区放在永久代，java8中放在元数据空间，并且通过GC机制对这个区域进行管理。")]),a._v(" "),t("h2",{attrs:{id:"堆内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆内存"}},[a._v("#")]),a._v(" 堆内存")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(500),loading:"lazy"}})]),a._v(" "),t("p",[a._v("堆内存还可以细分为：老年代、新生代（Eden、From Survivor、To Survivor）\nJVM启动时创建，在堆内存里存放着对象的实例，垃圾回收器主要就是管理堆内存。\n如果满了，就会出现OutOfMemoryError。")]),a._v(" "),t("h2",{attrs:{id:"虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈"}},[a._v("#")]),a._v(" 虚拟机栈")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(501),loading:"lazy"}})]),a._v(" "),t("p",[a._v("虚拟机栈：每个线程都会在这个空间里有一个私有的空间。"),t("br"),a._v("\n线程栈由多个栈帧（Stack Frame）组成。"),t("br"),a._v("\n一个线程会执行一个或多个方法，一个方法对应一个栈帧。"),t("br"),a._v("\n栈帧内容包含：局部变量表、操作数栈、动态链接、方法返回地址、附加信息等。"),t("br"),a._v("\n栈内存默认最大为1M，超出则抛出StackOverflowError错误。")]),a._v(" "),t("h2",{attrs:{id:"本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(502),loading:"lazy"}})]),a._v(" "),t("p",[a._v("和虚拟机栈功能类似，虚拟机栈是为虚拟机执行JAVA方法而准备的，本地方法栈是为虚拟机使用Native本地方法而准备的。"),t("br"),a._v("\n虚拟机规范没有规定具体的实现，由不同的虚拟机厂商去实现。"),t("br"),a._v("\nHotSpot虚拟机中虚拟机栈和本地方法栈的实现是一样的，同样，超出默认设置最大栈内存容量值也会抛出StackOverflowError错误。")]),a._v(" "),t("h2",{attrs:{id:"程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":s(503),loading:"lazy"}})]),a._v(" "),t("p",[a._v("程序计数器（Program Counter Register）记录当前线程执行字节码的位置，存储的是字节码指令地址，如果执行Native方法，则计数器值为空。"),t("br"),a._v("\n每个线程都在这个空间里有一个私有的空间，占用内存空间很少。"),t("br"),a._v("\nCPU同一时间，只会执行一条线程中的指令，JVM多线程会轮流切换并且分配CPU执行时间的方式。"),t("br"),a._v("\n线程切换后，需要通过程序计数器，来恢复正确的执行位置。")])])}),[],!1,null,null,null);t.default=v.exports}}]);