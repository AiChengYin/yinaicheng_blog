(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{567:function(s,t,a){"use strict";a.r(t);var e=a(8),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数据库设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计规范"}},[s._v("#")]),s._v(" 数据库设计规范")]),s._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),t("p",[s._v("数据库是公司信息的核心，其应用水平的高低直接影响到项目业务的发展水平。数据库设计的好坏决定了系统的性能、容量、可扩展性、可维护性等重要指标。一个好的数据库设计不仅可以保障业务的高速发展，而且可以有效节约服务器、网络等资源。数据库设计规范正是为保障线上系统能有良好的应用环境而提出的一个规则手册，适用于MySQL等数据库管理系统，主要规范对象是在MySQL上应用开发的程序员，DBA以及SQL优化相关人员。")]),s._v(" "),t("h2",{attrs:{id:"命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名规范"}},[s._v("#")]),s._v(" 命名规范")]),s._v(" "),t("p",[s._v("指数据库中表（TABLE），字段（COLUMN），索引（INDEX）等的命名规范，主要是针对在开发过程中对数据库中表、字段、索引等命名的一些规则。")]),s._v(" "),t("blockquote",[t("p",[s._v("基本命名原则")])]),s._v(" "),t("ol",[t("li",[s._v("命名统一采用26个小写英文字母和0－9这十个自然数，加上下划线_组成，共37个字符。不能出现其他字符（注释除外）。\n"),t("ul",[t("li",[s._v("不规范示例：USERINFO、Post@HZ")]),s._v(" "),t("li",[s._v("规范示例：userinfo、posthz、customer、customer_order")])])]),s._v(" "),t("li",[s._v("名称长度不超过30个字符，要求使用能准确表达对象功能的单数单词或单词缩写。")]),s._v(" "),t("li",[s._v("单个数据库中如果含系统多个模块对象，名称中需要加模块前缀。\n"),t("ul",[t("li",[s._v("示例：yx_user、yx_group、music_userrecommend")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("表命名")])]),s._v(" "),t("ol",[t("li",[s._v("实体表使用小写英文单词或单词组合，如userinfo、address。关系表由‘实体表_实体表’组成，如userinfo_address。")]),s._v(" "),t("li",[s._v("临时表的名称，以tmp开头，以创建日期结尾，如tmp_userexpired_20140101。")])]),s._v(" "),t("blockquote",[t("p",[s._v("字段命名")])]),s._v(" "),t("ol",[t("li",[s._v("字段的名称中如果包含多个单词，则由下划线分隔，如last_name、dest_address。")]),s._v(" "),t("li",[s._v("关联表间的关联字段应同名或以表面_字段名命名，如role表引用了user表的id字段则role表中关联字段为user_id即 user.id=role.user_id。")])]),s._v(" "),t("blockquote",[t("p",[s._v("索引命名")])]),s._v(" "),t("ol",[t("li",[s._v('除了主键外，所有索引必须定义索引名，格式为"索引前缀+字段名列表"。')]),s._v(" "),t("li",[s._v('索引前缀：除主键外的唯一性索引，使用"uk_"开头（unique key，唯一键），非唯一性索引，使用“idx_”开头。')]),s._v(" "),t("li",[s._v("字段名列表：单个字段尽量使用字段全名；多个字段名之间用下划线分隔，多个字段则尽量使用名字缩写。例如，(userid,parentid)上的非唯一性索引，可以命名为idx_uid_pid；userid上的唯一索引命名为uk_userid。")])]),s._v(" "),t("h2",{attrs:{id:"设计规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计规范"}},[s._v("#")]),s._v(" 设计规范")]),s._v(" "),t("p",[s._v("主要是针对如何设计高效、可维护的数据库模式(表)的一些约定及建议。")]),s._v(" "),t("blockquote",[t("p",[s._v("字段的设计")])]),s._v(" "),t("ol",[t("li",[s._v("字段类型选择，尽量选择能满足应用要求的最小数据类型，关联表间字段类型要求一致。例如，is_deleted字段值只有true/false值，可以考虑使用tinyint类型，无需使用int或varchar类型。")]),s._v(" "),t("li",[s._v("字段长度选择，避免定义过长的字段长度。合适的字段及字段长度不仅可以有效减少内存磁盘网络等方面开销，还可以加速ddl/join等执行速度，如主机名可以定义为varchar(64)，不要随便定义为varchar(1000)。")]),s._v(" "),t("li",[s._v("尽量使用整型代替字符型。整形在字段长度、索引大小等方面开销更小效率更高，如ip字段、邮编字段等。")]),s._v(" "),t("li",[s._v("非空及默认值定义，建议字段都设为非空，使用如-1、0、空字符串等常量代替NULL值。")]),s._v(" "),t("li",[s._v("字符集选择，选择满足应用要求的字符集与字符比较集，如无特殊要求，则统一使用表级别字符集，否则需要在字段级别单独定义。")]),s._v(" "),t("li",[s._v("禁止使用enum、set、boolean等数据类型，统一使用tinyint代替，金融类数据禁止使用float、double类型，统一只用decimal。")]),s._v(" "),t("li",[s._v("注释，每个字段必须以COMMENT语句给出字段的作用、必要的取值范围等。")])]),s._v(" "),t("blockquote",[t("p",[s._v("索引的设计")])]),s._v(" "),t("ol",[t("li",[s._v("选择在where子句中出现，且选择性和过滤性高的字段创建索引，过滤性少的无需创建。")]),s._v(" "),t("li",[s._v("在经常组合的过滤字段上做复合索引，选择性高的字段放在前面。")]),s._v(" "),t("li",[s._v("较长字符类型字段考虑使用前缀索引，如字段定义：user_name varchar(255) 字段前8个字符即可非常准确过滤，此时可以考虑建立索引idx_user_name(8)。")]),s._v(" "),t("li",[s._v("在需要order by/distinct/group by 等字段上建立合适索引。")]),s._v(" "),t("li",[s._v("在执行频率、并发非常高的情况下考虑建立覆盖索引，如下面语句并发非常高(建立idx_uid_pid_mid(uid,is_valid,pid,order_id)索引) ："),t("br"),s._v("\nselect uid,pid,order_id from user where uid=234 and is_valid=1;")])]),s._v(" "),t("blockquote",[t("p",[s._v("约束的设计")])]),s._v(" "),t("ol",[t("li",[s._v("主键约束：每张表需要有一个主键，统一用id bigint unsigned自增字段。")]),s._v(" "),t("li",[s._v("唯一约束：每张关键业务表需要有一个唯一键，代表业务规则。")]),s._v(" "),t("li",[s._v("不在数据库中定义外键，由应用保证，避免带来锁问题。")]),s._v(" "),t("li",[s._v("使用整型来实现check约束，如 性别字段使用tinyint，0表示男，1表示女。")])]),s._v(" "),t("blockquote",[t("p",[s._v("表其他规范")])]),s._v(" "),t("ol",[t("li",[s._v("表中必须包含表示记录修改时间字段db_update_time，同时建议加上表示记录插入时间的字段db_create_time。")]),s._v(" "),t("li",[s._v("如果表需要经常更新且更新的字段占比很少，将需要频繁更新的字段拆分到单独表。")]),s._v(" "),t("li",[s._v("经常访问的大字段（如blob,text）等需要单独放到一张表中，避免降低SQL效率，图片、电影等大文件数据禁止存数据库。")]),s._v(" "),t("li",[s._v("表的字符集统一使用utf8或utf8mb4(移动产品)，比较字符集使用utf8_general_ci，如有特殊需求，在字段中单独定义。")]),s._v(" "),t("li",[s._v("必须包含表功能的注释在建表语句中。")])]),s._v(" "),t("blockquote",[t("p",[s._v("建表示例")])]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  id "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户名'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  password \t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'加密后字符串'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'邮箱'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  age "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("tinyint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'年龄'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  sex "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("tinyint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0:男，1:女'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  mobile "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bigint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户手机号码'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  birthday "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'生日日期'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  face_url "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'头像url'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  address "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'地址'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  is_active "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("tinyint")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'是否激活,1：是 0:不是'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  db_create_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("timestamp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2000-01-01 00:00:00'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  db_update_time "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("timestamp")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIMESTAMP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIMESTAMP")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unique")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" uk_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v(" idx_mobile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mobile"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("comment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户信息'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h2",{attrs:{id:"sql编写规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql编写规范"}},[s._v("#")]),s._v(" SQL编写规范")]),s._v(" "),t("p",[s._v("SQL编写规范，是针对常用SQL语句给出一些高效编写的建议。")]),s._v(" "),t("blockquote",[t("p",[s._v("DML事务相关规则")])]),s._v(" "),t("p",[s._v("DML即data manipulation language，它是SELECT、UPDATE、INSERT、DELETE，这四条命令是用来对数据库里的数据进行操作的语言。")]),s._v(" "),t("ul",[t("li",[s._v("select/insert语句必须指定出具体的字段名，select for update/delete/update语句必须要有过滤字段，且过滤字段上需要有区分度高的索引。\n"),t("ul",[t("li",[s._v("说明： Innodb存储引擎根据索引加锁，select for update/delete/update的过滤字段上没有索引，则SQL将锁整张表,有区分度不高的索引将锁大部分数据。")])])]),s._v(" "),t("li",[s._v("使用短小事务，不使用显示加锁如select for update/lock in share mode等。")]),s._v(" "),t("li",[s._v("大量数据需要更改时（更新记录超过10万条），操作时需要使用批量提交，并且避免业务高峰期操作。")])]),s._v(" "),t("blockquote",[t("p",[s._v("查询语句-过滤字段")])]),s._v(" "),t("ul",[t("li",[s._v("不在where子句中对索引字段施加函数，这样将导致SQL无法正确利用索引。\n"),t("ul",[t("li",[s._v("错误：select id,name from tab where unix_timestamp(db_create_time)= 13883324。")]),s._v(" "),t("li",[s._v("正确：select id,name from tab where db_create_time = from_unixtime(13883324)。")])])]),s._v(" "),t("li",[s._v("模糊查询like：在业务允许情况下，尽量使用右模糊查询。\n"),t("ul",[t("li",[s._v("说明：col_name like 'abc%' 可以使用索引 而col_name like '%abc'则不可以。")])])]),s._v(" "),t("li",[s._v("严格要求使用正确类型的变量，杜绝隐式类型转换,表Join时join字段必须确保类型一致。\n"),t("ul",[t("li",[s._v("int_code为int类型，错误写法：int_code='1234' 正确写法：int_code=1234。")]),s._v(" "),t("li",[s._v("str_code为char类型，表join时 错误写法：a.str_code=b.int_code，正确写法：cast(a.str_code as signed)=b.int_code。")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("查询优化建议")])]),s._v(" "),t("ul",[t("li",[s._v("降低SQL复杂度，将需要多表关联的复杂查询拆分为多个简单查询。")]),s._v(" "),t("li",[s._v("严禁使用select *，明确写出查询的具体字段\n"),t("ul",[t("li",[s._v("select * 可能消耗更多的cpu、内存、网络等资源。")]),s._v(" "),t("li",[s._v("可能导致覆盖索引无法使用。")]),s._v(" "),t("li",[s._v("可能导致order by语句无法使用最优的排序算法")])])]),s._v(" "),t("li",[s._v("尽量避免使用子查询，可以改为left join或拆为多条sql。\n"),t("ul",[t("li",[s._v("执行子查询时，MySQL需要创建临时表，查询完毕后再删除这些临时表，所以，子查询的速度会受到一定的影响，这里多了一个创建和销毁临时表的过程。")])])]),s._v(" "),t("li",[s._v("不需要去重情况下使用 union all 而非 union，因为union需要额外的去重操作。")]),s._v(" "),t("li",[s._v("不在数据库端进行复杂计算（如浮点运算、时间复杂度计算等），将计算等任务交给服务端完成。")]),s._v(" "),t("li",[s._v("正确使用索引进行order by /group by /distinct，避免filesort use tmp table等情况。")]),s._v(" "),t("li",[s._v("没必要的时候不要做外连接，内连接效率比外连接高。")]),s._v(" "),t("li",[s._v("or条件若不能正确的走索引 可以考虑使用union 或in，通常同一个字段的or操作可以改为in，不同字段or操作改为union\n"),t("ul",[t("li",[s._v("使用in，如select id,uid,cid from  tab where uid = 1 or uid= 100 or uid=10; 改为：select id,uid,cid from tab where uid in (1,100,100);")]),s._v(" "),t("li",[s._v("使用union，如select id,uid,cid from tab  where  uid=100 or cid=500改为：  select id,uid,cid from tab  where  uid=100 union  select id,uid,cid from tab  where  cid=500;")])])]),s._v(" "),t("li",[s._v("避免检索大字段。")]),s._v(" "),t("li",[s._v("使用预编译（prepare），减少解析，防止注入。")]),s._v(" "),t("li",[s._v("计数统一使用count(*)，而不是count(1)或count(pk)也不是count(col_name)。\n"),t("ul",[t("li",[s._v("当col_name 为空时count(col_name) 结果与count("),t("em",[s._v(") 不一致，这里我们统一规定使用count(")]),s._v(") 而不是count(1) 或count(pk）。")]),s._v(" "),t("li",[s._v("在5.7版本中，InnoDB实现了新的handler的records接口函数，当需要表上的精确记录个数时，会直接调用该函数进行计算，总是使用聚集索引来进行计算行数。")])])]),s._v(" "),t("li",[s._v("in字句中不超过1000个常量。")]),s._v(" "),t("li",[s._v("禁止SQL中笛卡尔集操作，即表Join时不指定关联字段。")]),s._v(" "),t("li",[s._v("禁止查询结果非常大，建议使用Limit分段取结果。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);