(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{586:function(t,r,i){"use strict";i.r(r);var n=i(8),s=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"服务端解决跨域调用问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端解决跨域调用问题"}},[t._v("#")]),t._v(" 服务端解决跨域调用问题")]),t._v(" "),r("p",[t._v("Same Origin Policy，译为“同源策略”。它是对于客户端脚本（尤其是JavaScript）的重要安全度量标准，其目的在于防止某个文档或者脚本从多个不同“origin”（源）装载。 它认为自任何站点装载的信赖内容是不安全的。")]),t._v(" "),r("p",[t._v("当被浏览器半信半疑的脚本运行在沙箱时，它们应该只被允许访问来自同一站点的资源，而不是那些来自其它站点可能怀有恶意的资源。")]),t._v(" "),r("p",[t._v("注：具有相同的Origin，也即是拥有相同的协议、主机地址以及端口。一旦这三项数据中有一项不同，那么该资源就将被认为是从不同的Origin得来的，进而不被允许访问。")]),t._v(" "),r("p",[t._v('CORS简介:\nCORS是一个W3C标准，全称是"跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源(协议 + 域名 + 端口)服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 CORS需要浏览器和服务器同时支持。它的通信过程，都是浏览器自动完成，不需要用户参与。')]),t._v(" "),r("p",[t._v("对于开发者来说，CORS通信与同源的AJAX/Fetch通信没有差别，代码完全一样。浏览器一旦发现请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。 因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。")])])}),[],!1,null,null,null);r.default=s.exports}}]);