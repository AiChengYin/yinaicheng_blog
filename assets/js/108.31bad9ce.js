(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{559:function(s,a,t){"use strict";t.r(a);var e=t(8),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("h2",{attrs:{id:"mysql的timestamp问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql的timestamp问题"}},[s._v("#")]),s._v(" MySQL的TIMESTAMP问题")]),s._v(" "),a("p",[s._v("MySQL中的TIMESTAMP类型使用32位整数存储时间戳，最大值为2038年1月19日03:14:07。"),a("br"),s._v('\n一旦超过这个时间戳，MySQL就无法正常处理TIMESTAMP值。为了避免这个问题，MySQL从5.6.4版本开始支持使用64位整数存储时间戳，可以通过设置sql_mode参数中的"NO_ZERO_DATE"和"NO_ZERO_IN_DATE"选项来启用这个功能。'),a("br"),s._v("\n启用这个选项后，MySQL将使用BIGINT存储TIMESTAMP类型的值，可以支持更大的时间范围，最大值为约到294亿年后的某个时间点。\n如果使用的是早期版本的MySQL，并且无法升级到支持64位整数的版本，可以考虑使用DATETIME类型代替TIMESTAMP类型来存储日期和时间。"),a("br"),s._v("\nDATETIME类型使用8个字节存储，可以支持更大的时间范围，可以存储的最大时间是 '9999-12-31 23:59:59'。\n但是请注意，与TIMESTAMP类型不同，DATETIME类型不会自动更新为当前时间。")]),s._v(" "),a("p",[s._v("更改timestamp到datetime类型sql示例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("alter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("modify")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("column")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token identifier"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("test_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("datetime")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'测试时间'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"linux控制台关于mysql查询结果的输出展示优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux控制台关于mysql查询结果的输出展示优化"}},[s._v("#")]),s._v(" linux控制台关于MySQL查询结果的输出展示优化")]),s._v(" "),a("p",[s._v('"\\G"标记将查询结果展示为以列为单位的垂直格式，而不是以行为单位的水平格式。')]),s._v(" "),a("div",{staticClass:"language-log line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" SELECT "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" FROM table_name\\G\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"mysql中truncate和delete的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql中truncate和delete的区别"}},[s._v("#")]),s._v(" MySQL中truncate和delete的区别")]),s._v(" "),a("p",[s._v("在MySQL中，TRUNCATE和DELETE都可以用于删除表中的数据，但它们之间有几个主要的区别：")]),s._v(" "),a("ol",[a("li",[s._v("TRUNCATE TABLE是DDL语句，而DELETE是DML语句。")]),s._v(" "),a("li",[s._v("TRUNCATE TABLE删除表中的所有数据，但保留表结构，而DELETE仅删除符合条件的行。")]),s._v(" "),a("li",[s._v("TRUNCATE TABLE比DELETE更快，因为它不记录删除的每一行，而是直接删除整个表。")]),s._v(" "),a("li",[s._v("TRUNCATE TABLE无法撤销，而DELETE可以通过ROLLBACK语句撤销操作。\n因此，如果你只是想清空表中的数据并保留表结构，可以使用TRUNCATE TABLE。如果你需要根据条件删除行并且可能需要撤销操作，应该使用DELETE。")])]),s._v(" "),a("h2",{attrs:{id:"mysql-is和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-is和-的区别"}},[s._v("#")]),s._v(" mysql is和=的区别")]),s._v(" "),a("p",[s._v("MySQL中，IS和=都是用于判断两个值是否相等的运算符，但它们之间是有区别的。")]),s._v(" "),a("p",[s._v("IS运算符用于判断两个值是否完全相等，包括类型和值。如果两个值完全相等，则IS运算符返回TRUE，否则返回FALSE。例如，如果我们使用IS运算符来比较一个数字和一个字符串，即使它们的值相同，也会返回FALSE，因为它们的类型不同。")]),s._v(" "),a("p",[s._v("而=运算符只是用于判断两个值的值是否相等，不考虑它们的类型。如果两个值的值相等，则=运算符返回TRUE，否则返回FALSE。例如，如果我们使用=运算符来比较一个数字和一个字符串，即使它们的类型不同，但如果它们的值相同，则会返回TRUE。")]),s._v(" "),a("p",[s._v("因此，通常情况下，如果要判断两个值是否相等，应该优先考虑使用=运算符，因为它的效率更高，而如果需要考虑类型和值都相等时才算相等的情况，才需要使用IS运算符。")]),s._v(" "),a("h2",{attrs:{id:"mysql的-和-以及is-not区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql的-和-以及is-not区别"}},[s._v("#")]),s._v(" mysql的<>和!=以及is not区别")]),s._v(" "),a("p",[s._v("在 MySQL 中，<> 和 != 运算符都表示不等于（not equal）。它们在语义上是等价的，但是 != 更为常用。"),a("br"),s._v("\n另一方面，IS NOT 运算符用于测试一个值是否为 NULL。它的语法是 value IS NOT NULL，其中 value 是要测试的值。如果 value 不是 NULL，则表达式的结果为 TRUE，否则为 FALSE。因此，IS NOT 不是用于比较两个非 NULL 值的运算符，而是用于测试一个值是否为 NULL。")]),s._v(" "),a("p",[s._v("如何查看mysql表中空间最大的bigdecimal\n要查找 MySQL 表中空间最大的 BigDecimal 列，可以执行以下 SQL 查询语句：")]),s._v(" "),a("p",[s._v("SELECT MAX(LENGTH(CAST(<column_name> AS CHAR))) FROM <table_name>;\n将 <column_name> 替换为要查询的 BigDecimal 列名，将 <table_name> 替换为要查询的表名。此查询将返回该列中最大值的长度（以字符为单位），因为 BigDecimal 以字符串形式存储在 MySQL 中。")]),s._v(" "),a("p",[s._v("请注意，查询结果可能包含小数点、负号和其他非数字字符的长度。如果需要准确的数字长度，请在查询中使用 REPLACE() 函数或其他适当的函数来删除这些字符。")]),s._v(" "),a("h2",{attrs:{id:"mysql的length和char-length的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql的length和char-length的用法"}},[s._v("#")]),s._v(" mysql的length和char_length的用法")]),s._v(" "),a("p",[s._v("在MySQL中，LENGTH()和CHAR_LENGTH()函数都用于计算字符串的长度，但有一些区别：")]),s._v(" "),a("p",[s._v("LENGTH(): 这个函数返回字符串的字节数（以字节为单位）。")]),s._v(" "),a("div",{staticClass:"language-log line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[s._v("SELECT LENGTH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("，因为 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),s._v(" 由"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("个字节组成\nSELECT LENGTH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("，因为 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),s._v(" 在UTF"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("编码下占"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("个字节\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("CHAR_LENGTH(): 这个函数返回字符串的字符数。")]),s._v(" "),a("div",{staticClass:"language-log line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[s._v("SELECT CHAR_LENGTH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("，因为 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),s._v(" 有"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("个字符\nSELECT CHAR_LENGTH"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 返回 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("，因为 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),s._v(" 有"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("个字符\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在使用时，需要根据具体的需求选择合适的函数。如果数据库使用的是多字节字符集（如UTF-8），通常情况下应该使用CHAR_LENGTH()来计算字符串的长度，因为它可以正确地识别多字节字符。")]),s._v(" "),a("h2",{attrs:{id:"查看mysql的安装目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看mysql的安装目录"}},[s._v("#")]),s._v(" 查看mysql的安装目录")]),s._v(" "),a("p",[s._v("进入mysql控制台，输入：")]),s._v(" "),a("div",{staticClass:"language-log line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[s._v("show variables like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%char%"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);